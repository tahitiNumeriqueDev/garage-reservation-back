#!/bin/bash

# ============================================================================
# Script de test pour v√©rifier la protection contre la surbooking lors de la r√©servation
# ============================================================================
#
# Ce script teste que :
# 1. On peut r√©server sur un cr√©neau avec de la place disponible
# 2. On NE PEUT PAS r√©server sur un cr√©neau satur√© (toutes les places occup√©es)
# 3. Le syst√®me retourne une erreur appropri√©e (409 Conflict)
#
# Usage:
#   ./test-protection-reservation.sh
# ============================================================================

set -e  # Arr√™t en cas d'erreur

# Configuration
API_BASE_URL="http://localhost:8080"
DATE_TEST="2025-07-01T00:00:00Z"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Variables globales
SLOT_ID=""
SLOT_CAPACITY=0
RESERVATION_IDS=()

# Fonction de r√©cup√©ration d'un cr√©neau avec capacit√© = 2
get_available_slot() {
    log_info "Recherche d'un cr√©neau avec capacit√© = 2..."
    
    AVAILABLE_SLOTS=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    
    SLOT_ID=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].id')
    SLOT_CAPACITY=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].capaciteTotale')
    
    if [ -z "$SLOT_ID" ] || [ "$SLOT_ID" = "null" ]; then
        log_error "Aucun cr√©neau disponible trouv√©"
        return 1
    fi
    
    log_success "Cr√©neau s√©lectionn√© - ID: $SLOT_ID, Capacit√©: $SLOT_CAPACITY"
    return 0
}

# Fonction de cr√©ation d'une r√©servation (avec gestion des erreurs)
create_reservation_with_status() {
    local immatriculation="$1"
    local should_succeed="$2"  # true/false
    
    log_info "Tentative de r√©servation : $immatriculation..."
    
    RESERVATION_JSON=$(cat <<EOF
{
  "immatriculation": "$immatriculation",
  "kilometrage": 50000,
  "typeVehicule": "AUTO",
  "poidsLourd": false,
  "numeroTelephone": "012345678${#RESERVATION_IDS[@]}",
  "email": "test${#RESERVATION_IDS[@]}@example.com",
  "creneauId": $SLOT_ID
}
EOF
)
    
    # Faire la requ√™te et capturer le code de retour
    RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d "$RESERVATION_JSON" \
        "${API_BASE_URL}/api/reservations")
    
    # S√©parer la r√©ponse du code HTTP
    HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
    RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
    
    if [ "$should_succeed" = "true" ]; then
        # La r√©servation DOIT r√©ussir
        if [ "$HTTP_CODE" = "200" ]; then
            RESERVATION_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
            RESERVATION_IDS+=("$RESERVATION_ID")
            log_success "R√©servation $immatriculation r√©ussie - ID: $RESERVATION_ID"
            return 0
        else
            log_error "La r√©servation $immatriculation devrait r√©ussir mais a √©chou√© (HTTP $HTTP_CODE)"
            echo "$RESPONSE_BODY" | jq .
            return 1
        fi
    else
        # La r√©servation DOIT √©chouer
        if [ "$HTTP_CODE" = "409" ]; then
            log_success "R√©servation $immatriculation correctement REFUS√âE (HTTP 409 - Capacit√© atteinte)"
            return 0
        elif [ "$HTTP_CODE" = "200" ]; then
            log_error "La r√©servation $immatriculation devrait √™tre refus√©e mais a R√âUSSI !"
            RESERVATION_ID=$(echo "$RESPONSE_BODY" | jq -r '.id')
            RESERVATION_IDS+=("$RESERVATION_ID")
            return 1
        else
            log_error "Erreur inattendue pour $immatriculation (HTTP $HTTP_CODE)"
            echo "$RESPONSE_BODY" | jq .
            return 1
        fi
    fi
}

# Fonction de v√©rification de l'√©tat du cr√©neau
check_slot_status() {
    local context="$1"
    
    log_info "√âtat du cr√©neau $context :"
    SLOT_STATUS=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    
    local current_reservations=$(echo "$SLOT_STATUS" | jq -r '.nombreReservations')
    local capacity=$(echo "$SLOT_STATUS" | jq -r '.capaciteTotale')
    local available=$(echo "$SLOT_STATUS" | jq -r '.disponible')
    
    log_info "  - R√©servations: $current_reservations/$capacity"
    log_info "  - Flag disponible: $available"
    
    # V√©rifier si le cr√©neau appara√Æt dans les disponibilit√©s
    AVAILABLE_IN_LIST=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
    
    if [ "$AVAILABLE_IN_LIST" = "true" ]; then
        log_info "  - Statut: DISPONIBLE pour r√©servation"
    else
        log_info "  - Statut: INDISPONIBLE (satur√©)"
    fi
}

# Fonction de nettoyage
cleanup() {
    log_info "Nettoyage des donn√©es de test..."
    
    for reservation_id in "${RESERVATION_IDS[@]}"; do
        curl -s -X DELETE "${API_BASE_URL}/api/reservations/${reservation_id}" >/dev/null || true
    done
    
    log_success "Nettoyage termin√© (${#RESERVATION_IDS[@]} r√©servations supprim√©es)"
}

# Fonction principale
main() {
    echo "üõ°Ô∏è  Test de protection contre la surbooking"
    echo "=========================================="
    
    # Test de l'API
    if ! curl -s "${API_BASE_URL}/api/creneaux" >/dev/null 2>&1; then
        log_error "API non accessible"
        exit 1
    fi
    
    # R√©cup√©rer un cr√©neau disponible
    if ! get_available_slot; then
        log_error "Impossible de continuer le test"
        exit 1
    fi
    
    # √âtat initial
    check_slot_status "INITIAL"
    
    # Test 1 : Premi√®re r√©servation (doit r√©ussir)
    echo ""
    log_info "üß™ TEST 1 : Premi√®re r√©servation sur cr√©neau libre"
    if ! create_reservation_with_status "TEST-001" "true"; then
        cleanup
        exit 1
    fi
    check_slot_status "apr√®s 1√®re r√©servation"
    
    # Test 2 : Deuxi√®me r√©servation (doit r√©ussir car capacit√© = 2)
    echo ""
    log_info "üß™ TEST 2 : Deuxi√®me r√©servation (capacit√© = 2)"
    if ! create_reservation_with_status "TEST-002" "true"; then
        cleanup
        exit 1
    fi
    check_slot_status "apr√®s 2√®me r√©servation"
    
    # Test 3 : Troisi√®me r√©servation (DOIT √âCHOUER - capacit√© atteinte)
    echo ""
    log_info "üß™ TEST 3 : Troisi√®me r√©servation (DOIT √äTRE REFUS√âE)"
    if ! create_reservation_with_status "TEST-003" "false"; then
        cleanup
        exit 1
    fi
    check_slot_status "apr√®s tentative de 3√®me r√©servation"
    
    # Test 4 : Quatri√®me r√©servation (DOIT AUSSI √âCHOUER)
    echo ""
    log_info "üß™ TEST 4 : Quatri√®me r√©servation (DOIT AUSSI √äTRE REFUS√âE)"
    if ! create_reservation_with_status "TEST-004" "false"; then
        cleanup
        exit 1
    fi
    
    # R√©sultat
    echo ""
    log_success "üéâ Tous les tests de protection sont pass√©s avec succ√®s !"
    echo ""
    echo "üìã R√©sum√© des protections valid√©es :"
    echo "‚úÖ R√©servation autoris√©e quand places disponibles (1/2 et 2/2)"
    echo "‚úÖ R√©servation REFUS√âE quand capacit√© atteinte (3/2 et 4/2)"
    echo "‚úÖ Code d'erreur HTTP 409 correct"
    echo "‚úÖ Message d'erreur appropri√©"
    
    # Nettoyage final
    cleanup
    
    echo ""
    log_success "üõ°Ô∏è  Syst√®me de protection contre la surbooking op√©rationnel !"
}

# Ex√©cution
main "$@" 