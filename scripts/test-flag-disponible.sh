#!/bin/bash

# ============================================================================
# Script de test pour v√©rifier la gestion automatique du flag 'disponible'
# ============================================================================
#
# Ce script teste que :
# 1. Le flag 'disponible' reste 'true' tant qu'il y a de la place
# 2. Le flag 'disponible' passe √† 'false' quand la capacit√© est atteinte
# 3. Le flag 'disponible' repasse √† 'true' quand une r√©servation est annul√©e
# 4. Le comportement est coh√©rent dans toutes les API
#
# Usage:
#   ./test-flag-disponible.sh
# ============================================================================

set -e  # Arr√™t en cas d'erreur

# Configuration
API_BASE_URL="http://localhost:8080"
DATE_TEST="2025-07-01T00:00:00Z"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Variables globales
SLOT_ID=""
SLOT_CAPACITY=0
RESERVATION_IDS=()

# Fonction de r√©cup√©ration d'un cr√©neau avec capacit√© = 2
get_available_slot() {
    log_info "Recherche d'un cr√©neau avec capacit√© = 2..."
    
    AVAILABLE_SLOTS=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    
    SLOT_ID=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].id')
    SLOT_CAPACITY=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].capaciteTotale')
    
    if [ -z "$SLOT_ID" ] || [ "$SLOT_ID" = "null" ]; then
        log_error "Aucun cr√©neau disponible trouv√©"
        return 1
    fi
    
    log_success "Cr√©neau s√©lectionn√© - ID: $SLOT_ID, Capacit√©: $SLOT_CAPACITY"
    return 0
}

# Fonction de cr√©ation d'une r√©servation
create_reservation() {
    local immatriculation="$1"
    
    log_info "Cr√©ation de r√©servation : $immatriculation..."
    
    RESERVATION_JSON=$(cat <<EOF
{
  "immatriculation": "$immatriculation",
  "kilometrage": 50000,
  "typeVehicule": "AUTO",
  "poidsLourd": false,
  "numeroTelephone": "012345678${#RESERVATION_IDS[@]}",
  "email": "test${#RESERVATION_IDS[@]}@example.com",
  "creneauId": $SLOT_ID
}
EOF
)
    
    RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$RESERVATION_JSON" \
        "${API_BASE_URL}/api/reservations")
    
    RESERVATION_ID=$(echo "$RESPONSE" | jq -r '.id')
    RESERVATION_IDS+=("$RESERVATION_ID")
    log_success "R√©servation $immatriculation cr√©√©e - ID: $RESERVATION_ID"
    
    return 0
}

# Fonction de v√©rification d√©taill√©e du flag disponible
check_disponible_flag() {
    local context="$1"
    local expected_disponible="$2"  # "true" ou "false"
    
    log_info "üîç V√©rification du flag disponible $context :"
    
    # 1. V√©rification via API individuelle du cr√©neau
    SLOT_DETAIL=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    DISPONIBLE_FLAG=$(echo "$SLOT_DETAIL" | jq -r '.disponible')
    RESERVATIONS_COUNT=$(echo "$SLOT_DETAIL" | jq -r '.nombreReservations')
    CAPACITY=$(echo "$SLOT_DETAIL" | jq -r '.capaciteTotale')
    
    log_info "  üìä √âtat du cr√©neau :"
    log_info "    - Flag disponible: $DISPONIBLE_FLAG"
    log_info "    - R√©servations: $RESERVATIONS_COUNT/$CAPACITY"
    
    # 2. V√©rification via API de disponibilit√©s
    AVAILABLE_IN_LIST=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
    log_info "    - Pr√©sent dans disponibilit√©s: $AVAILABLE_IN_LIST"
    
    # 3. V√©rifications de coh√©rence
    local tests_passed=0
    local total_tests=3
    
    # Test 1: Flag disponible correct
    if [ "$DISPONIBLE_FLAG" = "$expected_disponible" ]; then
        log_success "  ‚úÖ Flag disponible correct: $DISPONIBLE_FLAG"
        tests_passed=$((tests_passed + 1))
    else
        log_error "  ‚ùå Flag disponible incorrect: attendu $expected_disponible, obtenu $DISPONIBLE_FLAG"
    fi
    
    # Test 2: Coh√©rence avec le listing des disponibilit√©s
    if [ "$expected_disponible" = "true" ] && [ "$AVAILABLE_IN_LIST" = "true" ]; then
        log_success "  ‚úÖ Coh√©rence disponibilit√©s: pr√©sent dans la liste"
        tests_passed=$((tests_passed + 1))
    elif [ "$expected_disponible" = "false" ] && [ "$AVAILABLE_IN_LIST" = "false" ]; then
        log_success "  ‚úÖ Coh√©rence disponibilit√©s: absent de la liste"
        tests_passed=$((tests_passed + 1))
    else
        log_error "  ‚ùå Incoh√©rence: flag=$DISPONIBLE_FLAG mais liste=$AVAILABLE_IN_LIST"
    fi
    
    # Test 3: Coh√©rence logique avec les r√©servations
    if [ "$RESERVATIONS_COUNT" -lt "$CAPACITY" ] && [ "$DISPONIBLE_FLAG" = "true" ]; then
        log_success "  ‚úÖ Logique correcte: places disponibles ‚Üí flag true"
        tests_passed=$((tests_passed + 1))
    elif [ "$RESERVATIONS_COUNT" -eq "$CAPACITY" ] && [ "$DISPONIBLE_FLAG" = "false" ]; then
        log_success "  ‚úÖ Logique correcte: capacit√© atteinte ‚Üí flag false"
        tests_passed=$((tests_passed + 1))
    else
        log_error "  ‚ùå Logique incoh√©rente: $RESERVATIONS_COUNT/$CAPACITY mais flag=$DISPONIBLE_FLAG"
    fi
    
    # R√©sum√© du test
    if [ $tests_passed -eq $total_tests ]; then
        log_success "  üéâ Tous les tests de coh√©rence pass√©s ($tests_passed/$total_tests)"
        return 0
    else
        log_error "  üí• √âchecs de coh√©rence ($tests_passed/$total_tests)"
        return 1
    fi
}

# Fonction de nettoyage
cleanup() {
    log_info "Nettoyage des donn√©es de test..."
    
    for reservation_id in "${RESERVATION_IDS[@]}"; do
        curl -s -X DELETE "${API_BASE_URL}/api/reservations/${reservation_id}" >/dev/null || true
    done
    
    log_success "Nettoyage termin√© (${#RESERVATION_IDS[@]} r√©servations supprim√©es)"
}

# Fonction principale
main() {
    echo "üîÑ Test de gestion automatique du flag 'disponible'"
    echo "================================================"
    
    # Test de l'API
    if ! curl -s "${API_BASE_URL}/api/creneaux" >/dev/null 2>&1; then
        log_error "API non accessible"
        exit 1
    fi
    
    # R√©cup√©rer un cr√©neau disponible
    if ! get_available_slot; then
        log_error "Impossible de continuer le test"
        exit 1
    fi
    
    # √âtat initial (doit √™tre disponible)
    echo ""
    log_info "üìã √âTAPE 1 : √âtat initial (0/2 r√©servations)"
    if ! check_disponible_flag "INITIAL" "true"; then
        cleanup
        exit 1
    fi
    
    # Premi√®re r√©servation (doit rester disponible)
    echo ""
    log_info "üìã √âTAPE 2 : Premi√®re r√©servation (1/2 r√©servations)"
    create_reservation "FLAG-01"
    sleep 1  # Petit d√©lai pour la mise √† jour
    if ! check_disponible_flag "apr√®s 1√®re r√©servation" "true"; then
        cleanup
        exit 1
    fi
    
    # Deuxi√®me r√©servation (doit passer √† indisponible)
    echo ""
    log_info "üìã √âTAPE 3 : Deuxi√®me r√©servation (2/2 r√©servations - SATURATION)"
    create_reservation "FLAG-02"
    sleep 1  # Petit d√©lai pour la mise √† jour
    if ! check_disponible_flag "apr√®s 2√®me r√©servation (satur√©)" "false"; then
        cleanup
        exit 1
    fi
    
    # Annulation d'une r√©servation (doit redevenir disponible)
    echo ""
    log_info "üìã √âTAPE 4 : Annulation d'une r√©servation (2‚Üí1/2 r√©servations)"
    FIRST_RESERVATION_ID=${RESERVATION_IDS[0]}
    log_info "Annulation de la r√©servation ID $FIRST_RESERVATION_ID..."
    curl -s -X PUT "${API_BASE_URL}/api/reservations/${FIRST_RESERVATION_ID}/annuler" >/dev/null
    sleep 1  # Petit d√©lai pour la mise √† jour
    if ! check_disponible_flag "apr√®s annulation (lib√©r√©)" "true"; then
        cleanup
        exit 1
    fi
    
    # Test de re-saturation
    echo ""
    log_info "üìã √âTAPE 5 : Nouvelle r√©servation pour re-saturer (1‚Üí2/2 r√©servations)"
    create_reservation "FLAG-03"
    sleep 1  # Petit d√©lai pour la mise √† jour
    if ! check_disponible_flag "apr√®s re-saturation" "false"; then
        cleanup
        exit 1
    fi
    
    # R√©sultat
    echo ""
    log_success "üéâ Tous les tests de gestion du flag 'disponible' sont pass√©s !"
    echo ""
    echo "üìã Fonctionnalit√©s valid√©es :"
    echo "‚úÖ Flag 'disponible' reste 'true' tant qu'il y a de la place"
    echo "‚úÖ Flag 'disponible' passe √† 'false' √† la saturation"
    echo "‚úÖ Flag 'disponible' redevient 'true' apr√®s annulation"
    echo "‚úÖ Coh√©rence parfaite entre flag et listes de disponibilit√©s"
    echo "‚úÖ Mise √† jour automatique en temps r√©el"
    
    # Nettoyage final
    cleanup
    
    echo ""
    log_success "üîÑ Gestion automatique du flag 'disponible' op√©rationnelle !"
}

# Ex√©cution
main "$@" 