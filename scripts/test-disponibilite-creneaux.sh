#!/bin/bash

# ============================================================================
# Script de test pour v√©rifier la disponibilit√© des cr√©neaux apr√®s r√©servation
# ============================================================================
#
# Ce script teste que :
# 1. Les cr√©neaux disponibles sont bien list√©s
# 2. Apr√®s une r√©servation, le cr√©neau n'appara√Æt plus comme disponible 
#    (ou sa capacit√© diminue si > 1)
# 3. Apr√®s annulation, le cr√©neau redevient disponible
#
# Usage:
#   ./test-disponibilite-creneaux.sh
# ============================================================================

set -e  # Arr√™t en cas d'erreur

# Configuration
API_BASE_URL="http://localhost:8080"
DATE_TEST="2025-07-01T00:00:00Z"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Fonction de test de l'API
test_api_ready() {
    local max_attempts=10
    local attempt=1
    
    log_info "V√©rification de la disponibilit√© de l'API..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -s "${API_BASE_URL}/api/creneaux" >/dev/null 2>&1; then
            log_success "API pr√™te !"
            return 0
        fi
        log_warning "Tentative $attempt/$max_attempts - API pas encore pr√™te..."
        sleep 3
        attempt=$((attempt + 1))
    done
    
    log_error "L'API n'est pas accessible apr√®s $max_attempts tentatives"
    exit 1
}

# √âtape 1 : R√©cup√©rer les cr√©neaux disponibles d'une journ√©e
get_available_slots() {
    log_info "R√©cup√©ration des cr√©neaux disponibles pour le $DATE_TEST..."
    
    AVAILABLE_SLOTS=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true" | jq .)
    AVAILABLE_COUNT=$(echo "$AVAILABLE_SLOTS" | jq 'length')
    
    log_success "$AVAILABLE_COUNT cr√©neaux disponibles trouv√©s"
    
    if [ "$AVAILABLE_COUNT" -eq 0 ]; then
        log_error "Aucun cr√©neau disponible pour faire le test"
        exit 1
    fi
    
    # Prendre le premier cr√©neau disponible
    SLOT_ID=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].id')
    SLOT_CAPACITY=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].capaciteTotale')
    SLOT_RESERVATIONS=$(echo "$AVAILABLE_SLOTS" | jq -r '.[0].nombreReservations')
    
    log_info "Cr√©neau s√©lectionn√© pour le test:"
    log_info "  - ID: $SLOT_ID"
    log_info "  - Capacit√© totale: $SLOT_CAPACITY"
    log_info "  - R√©servations actuelles: $SLOT_RESERVATIONS"
    
    return 0
}

# √âtape 2 : Cr√©er une r√©servation
create_reservation() {
    log_info "Cr√©ation d'une r√©servation de test..."
    
    RESERVATION_JSON=$(cat <<EOF
{
  "immatriculation": "TEST-001",
  "kilometrage": 50000,
  "typeVehicule": "AUTO",
  "poidsLourd": false,
  "numeroTelephone": "0123456789",
  "email": "test@example.com",
  "creneauId": $SLOT_ID
}
EOF
)
    
    RESERVATION_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$RESERVATION_JSON" \
        "${API_BASE_URL}/api/reservations")
    
    RESERVATION_ID=$(echo "$RESERVATION_RESPONSE" | jq -r '.id // empty')
    
    if [ -z "$RESERVATION_ID" ]; then
        log_error "√âchec de la cr√©ation de la r√©servation"
        echo "$RESERVATION_RESPONSE" | jq .
        exit 1
    fi
    
    log_success "R√©servation cr√©√©e avec l'ID: $RESERVATION_ID"
}

# √âtape 3 : V√©rifier que la disponibilit√© a chang√©
check_availability_after_reservation() {
    log_info "V√©rification de la disponibilit√© apr√®s r√©servation..."
    
    # R√©cup√©rer √† nouveau les cr√©neaux disponibles
    AVAILABLE_SLOTS_AFTER=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    AVAILABLE_COUNT_AFTER=$(echo "$AVAILABLE_SLOTS_AFTER" | jq 'length')
    
    # R√©cup√©rer les d√©tails du cr√©neau sp√©cifique
    SLOT_DETAILS=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    SLOT_RESERVATIONS_AFTER=$(echo "$SLOT_DETAILS" | jq -r '.nombreReservations')
    
    log_info "√âtat apr√®s r√©servation:"
    log_info "  - Cr√©neaux disponibles: $AVAILABLE_COUNT_AFTER"
    log_info "  - R√©servations sur le cr√©neau: $SLOT_RESERVATIONS_AFTER"
    
    # V√©rifications
    if [ "$SLOT_CAPACITY" -eq 1 ]; then
        # Capacit√© 1 : le cr√©neau ne doit plus √™tre disponible
        SLOT_STILL_AVAILABLE=$(echo "$AVAILABLE_SLOTS_AFTER" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
        
        if [ "$SLOT_STILL_AVAILABLE" = "false" ]; then
            log_success "‚úÖ Cr√©neau correctement retir√© des disponibilit√©s (capacit√©=1)"
        else
            log_error "‚ùå Le cr√©neau devrait √™tre indisponible mais il appara√Æt encore"
            return 1
        fi
    else
        # Capacit√© > 1 : v√©rifier que le nombre de r√©servations a augment√©
        if [ "$SLOT_RESERVATIONS_AFTER" -gt "$SLOT_RESERVATIONS" ]; then
            log_success "‚úÖ Nombre de r√©servations correctement incr√©ment√©"
        else
            log_error "‚ùå Le nombre de r√©servations n'a pas augment√©"
            return 1
        fi
        
        # Si le cr√©neau est maintenant complet, il ne doit plus appara√Ætre
        if [ "$SLOT_RESERVATIONS_AFTER" -ge "$SLOT_CAPACITY" ]; then
            SLOT_STILL_AVAILABLE=$(echo "$AVAILABLE_SLOTS_AFTER" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
            if [ "$SLOT_STILL_AVAILABLE" = "false" ]; then
                log_success "‚úÖ Cr√©neau complet correctement retir√© des disponibilit√©s"
            else
                log_error "‚ùå Le cr√©neau complet devrait √™tre indisponible"
                return 1
            fi
        fi
    fi
    
    return 0
}

# √âtape 4 : Annuler la r√©servation
cancel_reservation() {
    log_info "Annulation de la r√©servation de test..."
    
    CANCEL_RESPONSE=$(curl -s -X PUT "${API_BASE_URL}/api/reservations/${RESERVATION_ID}/annuler")
    CANCEL_STATUS=$(echo "$CANCEL_RESPONSE" | jq -r '.statut // empty')
    
    if [ "$CANCEL_STATUS" = "ANNULEE" ]; then
        log_success "R√©servation annul√©e avec succ√®s"
    else
        log_error "√âchec de l'annulation de la r√©servation"
        echo "$CANCEL_RESPONSE" | jq .
        return 1
    fi
}

# √âtape 5 : V√©rifier que la disponibilit√© est restaur√©e
check_availability_after_cancellation() {
    log_info "V√©rification de la disponibilit√© apr√®s annulation..."
    
    # Attendre un peu pour que les changements soient pris en compte
    sleep 2
    
    # R√©cup√©rer √† nouveau les cr√©neaux disponibles
    AVAILABLE_SLOTS_FINAL=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    AVAILABLE_COUNT_FINAL=$(echo "$AVAILABLE_SLOTS_FINAL" | jq 'length')
    
    # R√©cup√©rer les d√©tails du cr√©neau sp√©cifique
    SLOT_DETAILS_FINAL=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    SLOT_RESERVATIONS_FINAL=$(echo "$SLOT_DETAILS_FINAL" | jq -r '.nombreReservations')
    
    log_info "√âtat apr√®s annulation:"
    log_info "  - Cr√©neaux disponibles: $AVAILABLE_COUNT_FINAL"
    log_info "  - R√©servations actives sur le cr√©neau: $SLOT_RESERVATIONS_FINAL"
    
    # V√©rifications
    if [ "$SLOT_RESERVATIONS_FINAL" -eq "$SLOT_RESERVATIONS" ]; then
        log_success "‚úÖ Nombre de r√©servations restaur√© √† l'√©tat initial"
    else
        log_error "‚ùå Le nombre de r√©servations n'est pas revenu √† l'√©tat initial"
        return 1
    fi
    
    # Le cr√©neau doit √™tre √† nouveau disponible
    SLOT_AVAILABLE_AGAIN=$(echo "$AVAILABLE_SLOTS_FINAL" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
    
    if [ "$SLOT_AVAILABLE_AGAIN" = "true" ]; then
        log_success "‚úÖ Cr√©neau correctement restaur√© dans les disponibilit√©s"
    else
        log_error "‚ùå Le cr√©neau devrait √™tre √† nouveau disponible"
        return 1
    fi
    
    return 0
}

# √âtape 6 : Nettoyage
cleanup() {
    log_info "Nettoyage des donn√©es de test..."
    
    # Supprimer la r√©servation de test si elle existe encore
    if [ ! -z "$RESERVATION_ID" ]; then
        curl -s -X DELETE "${API_BASE_URL}/api/reservations/${RESERVATION_ID}" >/dev/null || true
        log_success "R√©servation de test supprim√©e"
    fi
}

# Fonction principale
main() {
    echo "üß™ Test de disponibilit√© des cr√©neaux apr√®s r√©servation"
    echo "======================================================="
    
    # Test de l'API
    test_api_ready
    
    # Variables globales pour le test
    AVAILABLE_SLOTS=""
    AVAILABLE_COUNT=0
    SLOT_ID=""
    SLOT_CAPACITY=0
    SLOT_RESERVATIONS=0
    RESERVATION_ID=""
    
    # Ex√©cution des tests
    if get_available_slots && \
       create_reservation && \
       check_availability_after_reservation && \
       cancel_reservation && \
       check_availability_after_cancellation; then
        
        log_success "üéâ Tous les tests sont pass√©s avec succ√®s !"
        echo ""
        echo "üìã R√©sum√© des fonctionnalit√©s test√©es :"
        echo "‚úÖ Listage des cr√©neaux disponibles"
        echo "‚úÖ Cr√©ation de r√©servation"
        echo "‚úÖ Mise √† jour de la disponibilit√© apr√®s r√©servation"
        echo "‚úÖ Annulation de r√©servation"
        echo "‚úÖ Restauration de la disponibilit√© apr√®s annulation"
        
    else
        log_error "‚ùå Au moins un test a √©chou√©"
        cleanup
        exit 1
    fi
    
    # Nettoyage final
    cleanup
    
    echo ""
    log_success "üöÄ Syst√®me de disponibilit√© des cr√©neaux op√©rationnel !"
}

# Ex√©cution
main "$@" 