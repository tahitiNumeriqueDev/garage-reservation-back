#!/bin/bash

# ============================================================================
# Script de test pour v√©rifier qu'un cr√©neau devient indisponible 
# quand sa capacit√© est compl√®tement occup√©e
# ============================================================================
#
# Ce script teste que :
# 1. Un cr√©neau avec capacit√©=2 reste disponible apr√®s 1 r√©servation
# 2. Le m√™me cr√©neau devient indisponible apr√®s 2 r√©servations
# 3. Le cr√©neau redevient disponible apr√®s annulation d'une r√©servation
#
# Usage:
#   ./test-capacite-complete.sh
# ============================================================================

set -e  # Arr√™t en cas d'erreur

# Configuration
API_BASE_URL="http://localhost:8080"
DATE_TEST="2025-07-01T00:00:00Z"

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage avec couleur
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# Variables globales pour les r√©servations
RESERVATION_ID_1=""
RESERVATION_ID_2=""
SLOT_ID=""
SLOT_CAPACITY=0

# Fonction de r√©cup√©ration d'un cr√©neau avec capacit√© >= 2
get_slot_with_capacity_2() {
    log_info "Recherche d'un cr√©neau avec capacit√© >= 2..."
    
    AVAILABLE_SLOTS=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    
    # Filtrer les cr√©neaux avec capacit√© >= 2
    SLOT_WITH_CAPACITY=$(echo "$AVAILABLE_SLOTS" | jq '.[] | select(.capaciteTotale >= 2) | select(.nombreReservations == 0) | .id' | head -1)
    
    if [ -z "$SLOT_WITH_CAPACITY" ] || [ "$SLOT_WITH_CAPACITY" = "null" ]; then
        log_error "Aucun cr√©neau avec capacit√© >= 2 et sans r√©servation trouv√©"
        return 1
    fi
    
    SLOT_ID=$SLOT_WITH_CAPACITY
    
    # R√©cup√©rer les d√©tails du cr√©neau
    SLOT_DETAILS=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    SLOT_CAPACITY=$(echo "$SLOT_DETAILS" | jq -r '.capaciteTotale')
    
    log_success "Cr√©neau trouv√© - ID: $SLOT_ID, Capacit√©: $SLOT_CAPACITY"
    return 0
}

# Fonction de cr√©ation d'une r√©servation
create_reservation() {
    local immatriculation="$1"
    local email="test${immatriculation}@example.com"
    
    log_info "Cr√©ation de la r√©servation $immatriculation..."
    
    RESERVATION_JSON=$(cat <<EOF
{
  "immatriculation": "$immatriculation",
  "kilometrage": 50000,
  "typeVehicule": "AUTO",
  "poidsLourd": false,
  "numeroTelephone": "012345678${immatriculation: -1}",
  "email": "$email",
  "creneauId": $SLOT_ID
}
EOF
)
    
    RESERVATION_RESPONSE=$(curl -s -X POST \
        -H "Content-Type: application/json" \
        -d "$RESERVATION_JSON" \
        "${API_BASE_URL}/api/reservations")
    
    RESERVATION_ID=$(echo "$RESERVATION_RESPONSE" | jq -r '.id // empty')
    
    if [ -z "$RESERVATION_ID" ]; then
        log_error "√âchec de la cr√©ation de la r√©servation $immatriculation"
        echo "$RESERVATION_RESPONSE" | jq .
        return 1
    fi
    
    log_success "R√©servation $immatriculation cr√©√©e avec l'ID: $RESERVATION_ID"
    echo "$RESERVATION_ID"
}

# Fonction de v√©rification de disponibilit√©
check_availability() {
    local expected_available="$1"
    local context="$2"
    
    log_info "V√©rification de la disponibilit√© ($context)..."
    
    # R√©cup√©rer les cr√©neaux disponibles
    AVAILABLE_SLOTS=$(curl -s "${API_BASE_URL}/api/creneaux/jour/${DATE_TEST}?disponiblesOnly=true")
    
    # V√©rifier si notre cr√©neau est dans la liste
    SLOT_AVAILABLE=$(echo "$AVAILABLE_SLOTS" | jq --arg slot_id "$SLOT_ID" 'any(.[]; .id == ($slot_id | tonumber))')
    
    # R√©cup√©rer les d√©tails du cr√©neau
    SLOT_DETAILS=$(curl -s "${API_BASE_URL}/api/creneaux/${SLOT_ID}")
    CURRENT_RESERVATIONS=$(echo "$SLOT_DETAILS" | jq -r '.nombreReservations')
    
    log_info "√âtat du cr√©neau: $CURRENT_RESERVATIONS/$SLOT_CAPACITY r√©servations"
    
    if [ "$SLOT_AVAILABLE" = "$expected_available" ]; then
        if [ "$expected_available" = "true" ]; then
            log_success "‚úÖ Cr√©neau correctement disponible"
        else
            log_success "‚úÖ Cr√©neau correctement indisponible (capacit√© atteinte)"
        fi
        return 0
    else
        if [ "$expected_available" = "true" ]; then
            log_error "‚ùå Le cr√©neau devrait √™tre disponible mais ne l'est pas"
        else
            log_error "‚ùå Le cr√©neau devrait √™tre indisponible mais il appara√Æt comme disponible"
        fi
        return 1
    fi
}

# Fonction d'annulation d'une r√©servation
cancel_reservation() {
    local reservation_id="$1"
    
    log_info "Annulation de la r√©servation ID $reservation_id..."
    
    CANCEL_RESPONSE=$(curl -s -X PUT "${API_BASE_URL}/api/reservations/${reservation_id}/annuler")
    CANCEL_STATUS=$(echo "$CANCEL_RESPONSE" | jq -r '.statut // empty')
    
    if [ "$CANCEL_STATUS" = "ANNULEE" ]; then
        log_success "R√©servation $reservation_id annul√©e avec succ√®s"
        return 0
    else
        log_error "√âchec de l'annulation de la r√©servation $reservation_id"
        echo "$CANCEL_RESPONSE" | jq .
        return 1
    fi
}

# Fonction de nettoyage
cleanup() {
    log_info "Nettoyage des donn√©es de test..."
    
    if [ ! -z "$RESERVATION_ID_1" ]; then
        curl -s -X DELETE "${API_BASE_URL}/api/reservations/${RESERVATION_ID_1}" >/dev/null || true
    fi
    
    if [ ! -z "$RESERVATION_ID_2" ]; then
        curl -s -X DELETE "${API_BASE_URL}/api/reservations/${RESERVATION_ID_2}" >/dev/null || true
    fi
    
    log_success "Nettoyage termin√©"
}

# Fonction principale
main() {
    echo "üß™ Test de capacit√© compl√®te des cr√©neaux"
    echo "========================================="
    
    # Test de l'API
    if ! curl -s "${API_BASE_URL}/api/creneaux" >/dev/null 2>&1; then
        log_error "API non accessible"
        exit 1
    fi
    
    # R√©cup√©rer un cr√©neau avec capacit√© >= 2
    if ! get_slot_with_capacity_2; then
        log_error "Impossible de continuer le test"
        exit 1
    fi
    
    # V√©rifier que le cr√©neau est initialement disponible
    if ! check_availability "true" "√©tat initial"; then
        cleanup
        exit 1
    fi
    
    # Cr√©er la premi√®re r√©servation
    RESERVATION_ID_1=$(create_reservation "TEST-001")
    if [ $? -ne 0 ]; then
        cleanup
        exit 1
    fi
    
    # V√©rifier que le cr√©neau est toujours disponible
    if ! check_availability "true" "apr√®s 1√®re r√©servation"; then
        cleanup
        exit 1
    fi
    
    # Cr√©er la deuxi√®me r√©servation
    RESERVATION_ID_2=$(create_reservation "TEST-002")
    if [ $? -ne 0 ]; then
        cleanup
        exit 1
    fi
    
    # V√©rifier que le cr√©neau n'est plus disponible
    if ! check_availability "false" "apr√®s 2√®me r√©servation (capacit√© atteinte)"; then
        cleanup
        exit 1
    fi
    
    # Annuler une r√©servation
    if ! cancel_reservation "$RESERVATION_ID_1"; then
        cleanup
        exit 1
    fi
    
    # Attendre un peu pour que les changements soient pris en compte
    sleep 2
    
    # V√©rifier que le cr√©neau est √† nouveau disponible
    if ! check_availability "true" "apr√®s annulation d'une r√©servation"; then
        cleanup
        exit 1
    fi
    
    log_success "üéâ Tous les tests sont pass√©s avec succ√®s !"
    echo ""
    echo "üìã R√©sum√© des fonctionnalit√©s test√©es :"
    echo "‚úÖ Cr√©neau reste disponible si capacit√© non atteinte"
    echo "‚úÖ Cr√©neau devient indisponible quand capacit√© atteinte"
    echo "‚úÖ Cr√©neau redevient disponible apr√®s annulation"
    
    # Nettoyage final
    cleanup
    
    echo ""
    log_success "üöÄ Syst√®me de gestion de capacit√© des cr√©neaux op√©rationnel !"
}

# Ex√©cution
main "$@" 